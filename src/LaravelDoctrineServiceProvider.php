<?php namespace Paolooo\LaravelDoctrine;

use Illuminate\Support\ServiceProvider;

use Doctrine\ORM\Tools\Setup;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Configuration;
use Doctrine\Common\Cache\ArrayCache;
use Doctrine\Common\Cache\ApcCache;

class LaravelDoctrineServiceProvider extends ServiceProvider
{
    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->singleton('Doctrine\ORM\EntityManager', function($app) {

            $config = $app->make('config');

            switch ( env('CACHE_DRIVER') ) {
                case 'array':
                    $cache = new \Doctrine\Common\Cache\ArrayCache;
                    break;

                case 'apc':
                    $cache = new \Doctrine\Common\Cache\ApcCache;
                    break;

                default:
                    $cache  = new \Doctrine\Common\Cache\FilesystemCache(
                        $config->get('cache.stores.file.path')
                    );
            }

            $default = $config->get('database.default');
            $database = $config->get("database.connections.{$default}");

            $config = new Configuration;
            $config->setMetadataCacheImpl($cache);
            $driverImpl = $config->newDefaultAnnotationDriver( env('DOCTRINE_MAPPING_DIR', app_path()) );
            $config->setMetadataDriverImpl($driverImpl);
            $config->setQueryCacheImpl($cache);
            $config->setProxyDir( env('DOCTRINE_PROXY_DIR') );
            $config->setProxyNamespace( env('DOCTRINE_PROXY_NAMESPACE', storage_path() . DIRECTORY_SEPARATOR . 'app') );
            $config->setAutoGenerateProxyClasses( env('DOCTRINE_PROXY_AUTOGENERATED') );

            // database configuration parameters
            $connectionOptions = array(
                'driver'    => $database['driver'],
                'user'      => $database['username'],
                'password'  => $database['password'],
                'dbname'    => $database['database'],
                'host'      => $database['host'],
            );

            return EntityManager::create($connectionOptions, $config);
        });

        $this->commands([
            'Paolooo\LaravelDoctrine\Console\DoctrineCommand'
        ]);
    }
}
