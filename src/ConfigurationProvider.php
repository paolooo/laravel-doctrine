<?php namespace Paolooo\LaravelDoctrine;

use Doctrine\ORM\Configuration;
use Doctrine\Common\Cache\Cache;

class ConfigurationProvider implements ConfigurationInterface
{
    protected $config;
    protected $cache;
    protected $params;

    public function __construct(
        Cache $cache,
        $params,
        Configuration $config = null
    ) {
        $this->cache = $cache;
        $this->params = $params;

        $this->setConfiguration($config);
        $this->create();
    }

    /**
     * Set or instantiate Configuration
     */
    protected function setConfiguration(Configuration $config=null)
    {
        $this->config = (!empty($config)) ? $config : new Configuration;
    }

    /**
     * Make Configuration
     *
     * @param string $key
     * @return Doctrine\ORM\Configuration
     */
    public function create($key=null)
    {
        $params = $this->getParams($key);

        $this->config->setMetadataCacheImpl($this->cache);
        $driverImpl = $this->config->newDefaultAnnotationDriver($params['mappingDir']);
        $this->config->setMetadataDriverImpl($driverImpl);
        $this->config->setQueryCacheImpl($this->cache);
        $this->config->setProxyDir($params['proxyDir']);
        $this->config->setProxyNamespace($params['proxyNS']);
        $this->config->setAutoGenerateProxyClasses($params['proxyAutogenerated']);

        return $this->config;
    }

    protected function getParams($key=null)
    {
        $config = array_get($this->params, $key) ?: [];
        $params = array_merge($this->params, $config);

        return [
            'mappingDir' => $params['mappingDir'],
            'proxyDir'   => $params['proxyDir'],
            'proxyNS'    => $params['proxyNS'],
            'proxyAutogenerated' => $params['proxyAutogenerated']
        ];
    }

    /**
     * {@inherit}
     */
    public function config()
    {
        return $this->config;
    }

}
